{"version":3,"file":"static/js/344.eec18156.chunk.js","mappings":"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","sources":["pages/Blogs.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../components/Loading\";\n// Icons\nimport { BsChevronLeft, BsChevronRight } from \"react-icons/bs\";\n// Redux\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addBlogEntry, updateCount } from \"../state/blogReducer.js\";\n\nconst Blogs = () => {\n  // REDUX\n  const blogState = useSelector((state) => state.blog.entries);\n  const totalCount = useSelector((state) => state.blog.count);\n  const dispatch = useDispatch();\n  // LOCAL STATE\n  const [blogData, setBlogData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  // GET BLOG ENTRIES BY PAGE NUMBER\n  const loadBlogEntries = (pageNumber) => {\n    axios\n      .get(`/api/blogs?page=${pageNumber}`)\n      .then((res) => {\n        setBlogData(res.data);\n        dispatch(addBlogEntry(res.data));\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n        setLoading(false);\n      });\n  };\n\n  // METHOD TO HANDLE BLOG ENTRIES ON PAGE CHANGE\n  const changePage = (newPage) => {\n    setLoading(true);\n    let nextIndex = newPage * 10;\n    switch (blogState[nextIndex]) {\n      case undefined:\n        loadBlogEntries(newPage);\n        break;\n      default:\n        setBlogData(blogState.slice(nextIndex, nextIndex + 10));\n        setLoading(false);\n        break;\n    }\n  };\n\n  // HANDLE PAGE CHANGE\n  const handlePageChange = (direction) => {\n    if (direction === \"prev\" && currentPage > 0) {\n      let newPage = currentPage - 1;\n      setCurrentPage(newPage);\n      changePage(newPage);\n    } else if (\n      direction === \"next\" &&\n      currentPage < Math.ceil(totalCount / 10) - 1\n    ) {\n      let newPage = currentPage + 1;\n      setCurrentPage(newPage);\n      changePage(newPage);\n    }\n  };\n\n  useEffect(() => {\n    // When page loads, check if redux already has blog entries\n    if (blogState.length === 0) {\n      // Get total count of blog entries\n      axios\n        .get(\"/api/blogs/count\")\n        .then((res) => {\n          dispatch(updateCount(res.data[0].blog_count));\n          loadBlogEntries(currentPage);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    } else {\n      // If blog entries already present, reload with first page of entries\n      const reloadedEntries = blogState.slice(0, 10);\n      setBlogData(reloadedEntries);\n      setLoading(false);\n    }\n    // Set navbar 'Blog' option to active so it is underlined\n    const blogLink = document.getElementById(\"blog\");\n    blogLink.classList.add(\"active\");\n    // Remove active class on component unmount\n    return () => {\n      blogLink.classList.remove(\"active\");\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /* Set loading spinner until data comes back */\n  if (loading) {\n    return (\n      <div className=\"loading\">\n        <Loading />\n      </div>\n    );\n    /* Once API call is back, determines if entries or blank */\n  } else {\n    return (\n      <div className=\"posts_container wrapper\">\n        {blogData.length > 0 ? (\n          <div className=\"posts\">\n            {blogData.map((blog) => (\n              <div className=\"post\" key={blog.id}>\n                <div className=\"post_image\">\n                  <img src={`/uploads/${blog.main_image}`} alt={blog.title} />\n                </div>\n                <div className=\"post_content\">\n                  <h1 className=\"post_title\">{blog.title}</h1>\n                  <p className=\"post_description\">{blog.description}</p>\n                  <Link className=\"post_link\" to={`/blog/${blog.id}`}>\n                    <button className=\"post_button\">Read More</button>\n                  </Link>\n                </div>\n              </div>\n            ))}\n            {totalCount <= 10 ? null : (\n              <div className=\"page_wrapper\">\n                <button onClick={() => handlePageChange(\"prev\")}>\n                  <BsChevronLeft />\n                </button>\n                {Array.from({ length: Math.ceil(totalCount / 10) }).map(\n                  (_, index) => (\n                    <button\n                      key={index}\n                      onClick={() => changePage(index)}\n                      className={index + 1 === currentPage ? \"active\" : \"\"}\n                    >\n                      {index + 1}\n                    </button>\n                  )\n                )}\n                <button onClick={() => handlePageChange(\"next\")}>\n                  <BsChevronRight />\n                </button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"no_posts\">\n            <h1>No Posts Found</h1>\n            <p>Check back later for more posts!</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default Blogs;\n"],"names":["blogState","useSelector","state","blog","entries","totalCount","count","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","blogData","setBlogData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","currentPage","setCurrentPage","loadBlogEntries","pageNumber","axios","concat","then","res","data","addBlogEntry","catch","err","console","error","changePage","newPage","nextIndex","undefined","slice","handlePageChange","direction","Math","ceil","useEffect","length","updateCount","blog_count","reloadedEntries","blogLink","document","getElementById","classList","add","remove","_jsx","className","children","Loading","_jsxs","map","src","main_image","alt","title","description","Link","to","id","onClick","BsChevronLeft","Array","from","_","index","BsChevronRight"],"sourceRoot":""}